<?php
/**
 * Created by PhpStorm.
 * User: christian
 * Date: 18/04/16
 * Time: 06:44
 */

namespace Helper\Resultset;


use Mockery\MockInterface;
use Veloci\Core\Helper\Resultset\RepositoryResultset;
use Veloci\Core\Helper\Resultset\Resultset;

class RepositoryResultsetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MockInterface|\Iterator
     */
    private $cursor;

    /**
     * @var Resultset
     */
    private $resultset;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->cursor = $this->mockCursor();

        $this->cursor->shouldReceive('rewind')->once();

        $this->resultset = new RepositoryResultset($this->cursor);
    }

    /**
     * @test
     */
    public function shouldReturnCurrent()
    {

        $expectedValue = ['aaa'];

        $this->cursor->shouldReceive('current')->once()->andReturn($expectedValue);

        $value = $this->resultset->current();

        \PHPUnit_Framework_Assert::assertEquals($expectedValue, $value);
    }

    /**
     * @test
     */
    public function shouldReturnNullCurrent()
    {

        $expectedValue = null;

        $this->cursor->shouldReceive('current')->once()->andReturn($expectedValue);

        $value = $this->resultset->current();

        \PHPUnit_Framework_Assert::assertEquals($expectedValue, $value);
    }

    /**
     * @test
     */
    public function shouldApplyFiltersOnCurrent()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldHydrateCurrent()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldNotIterateIfNotValid()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldIterateNextItem()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldReturnCurrentKey()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldReturnIfCurrentPositionIsValid()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldRewind()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }


    /**
     * @test
     */
    public function shouldAppendFilters()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldReturnAnArray()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }

    /**
     * @test
     */
    public function shouldReturnNextElement()
    {
        \PHPUnit_Framework_Assert::markTestIncomplete('TODO');
    }


    /**
     * @return \Mockery\MockInterface|\Iterator
     */
    private function mockCursor()
    {
        return \Mockery::mock(\Iterator::class);
    }
}
