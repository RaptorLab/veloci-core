<?php
/**
 * Created by PhpStorm.
 * User: christian
 * Date: 1/14/17
 * Time: 2:46 AM
 */

namespace Veloci\Core\Factory;



use Mockery;
use Veloci\Core\Helper\DependencyInjectionContainer;
use Veloci\Core\Helper\Serializer\EntitySerializer;
use Veloci\Core\Model\DummyEntity;
use Veloci\Core\Model\DummyEntityDefault;
use Veloci\Core\Repository\EntityRepository;

class ContainerAwareEntityFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @test
     */
    public function shouldCreateAnInstanceFromAnInterface () {
        $data = [
            'id' => 5,
            'value' => 'Pippo',
            'externalIndex' => 2,
            'createdAt' => new \DateTime(),
            'updatedAt' => new \DateTime()
        ];

        $container = $this->mockContainer();

        $container->shouldReceive('getImplementationClass')->once()->with(DummyEntity::class)->andReturn(DummyEntityDefault::class);

        $dummyEntity = $this->mockEntity();
        $serializer = $this->mockSerialier();

        $serializer->shouldReceive('arrayToObject')->with($data, DummyEntityDefault::class)->andReturn($dummyEntity);

        $factory = new ContainerAwareEntityFactory($container, $serializer);

        $entity = $factory->createInstance(DummyEntity::class, $data);

        \PHPUnit_Framework_Assert::assertEquals($dummyEntity, $entity);
    }

    /**
     * @test
     */
    public function shouldCreateAnInstanceFromAConcreteClass () {
        $data = [
            'id' => 5,
            'value' => 'Pippo',
            'externalIndex' => 2,
            'createdAt' => new \DateTime(),
            'updatedAt' => new \DateTime()
        ];

        $container = $this->mockContainer();

        $container->shouldReceive('getImplementationClass')->never();

        $dummyEntity = $this->mockEntity();
        $serializer = $this->mockSerialier();

        $serializer->shouldReceive('arrayToObject')->with($data, DummyEntityDefault::class)->andReturn($dummyEntity);

        $factory = new ContainerAwareEntityFactory($container, $serializer);

        $entity = $factory->createInstance(DummyEntityDefault::class, $data);

        \PHPUnit_Framework_Assert::assertEquals($dummyEntity, $entity);
    }

    /**
     * @test
     */
    public function shouldNotCreateAnInstance() {

        $container = $this->mockContainer();

        $container->shouldReceive('getImplementationClass')->with(DummyEntity::class)->andReturnNull();

        $serializer = $this->mockSerialier();

        $serializer->shouldNotReceive();

        $factory = new ContainerAwareEntityFactory($container, $serializer);

        $entity = $factory->createInstance(DummyEntity::class, []);

        \PHPUnit_Framework_Assert::assertNull($entity);
    }

    /**
     * @test
     */
    public function shouldReturnNullIfNotAnEntity() {
        $container = $this->mockContainer();
        $container->shouldNotReceive();

        $serializer = $this->mockSerialier();
        $serializer->shouldNotReceive();

        $factory = new ContainerAwareEntityFactory($container, $serializer);

        $entity = $factory->createInstance(EntityRepository::class, []);

        \PHPUnit_Framework_Assert::assertNull($entity);
    }


    /**
     * @return \Mockery\MockInterface|DependencyInjectionContainer
     */
    private function mockContainer() {
        $mock = Mockery::mock(DependencyInjectionContainer::class);

        return $mock;
    }

    private function mockSerialier() {
        return Mockery::mock(EntitySerializer::class);
    }

    private function mockEntity() {
        return Mockery::mock(DummyEntityDefault::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        Mockery::close();
    }

}